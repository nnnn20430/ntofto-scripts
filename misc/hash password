in bash (SSHA):
export password="HI"
export salt="nnnntest"
echo $({ echo -n "{SSHA}"; { echo -n "${password}${salt}" | { openssl dgst -binary -sha1; echo -n "${salt}"; } | base64; }; })


using php (SSHA):
export password="HI"
export salt="nnnntest"
echo '<?php $password = getenv("password"); $salt = getenv("salt"); $hash = base64_encode( sha1($password . $salt, true) . $salt ); echo "{SSHA}".$hash; ?>' | php


using php (SHA512):
export password="HI"
export salt="nnnntest"
echo -n '<?php $password=getenv("password"); $salt="\$6\$".getenv("salt"); echo crypt($password, $salt) ?>' | php
or random salt:
echo -n '<?php $password=getenv("password"); $salt="\$6\$".base64_encode(uniqid(mt_rand(), true)); echo crypt($password, $salt) ?>' | php


using python (SHA512):
export password="HI"
export salt="nnnntest"
python -c 'import crypt; import os; print crypt.crypt(os.environ["password"],"$6$"+os.environ["salt"])'
or random salt:
python -c 'import crypt; import os; import random; ALPHABET = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"; print crypt.crypt(os.environ["password"],"$6$"+"".join(random.choice(ALPHABET) for i in range(16)))'

using perl (SHA512):
export password="HI"
perl -e 'my @chars = (0..9, 'A'..'Z', 'a'..'z'); my $salt = "\$6\$"; $salt .= $chars[rand @chars] for 1..16; print crypt($ENV{"password"}, $salt) . "\n";'

