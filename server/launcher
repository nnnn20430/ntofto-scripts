#!/bin/bash

# constants
declare -r INVOKED_DIR="$PWD"
declare -r SCRIPT_ROOT=$(cd "${0%/*}" && echo "$PWD")

# variables
START_INIT_COMMAND="
mount -t tmpfs tmpfs -o rw,mode=1777,strictatime ${SCRIPT_ROOT}/server/nginxprefix/tmp
mount --bind $(realpath ${SCRIPT_ROOT}/builds/mariadb/latest) ${SCRIPT_ROOT}/server/mariadb/src
find ${SCRIPT_ROOT}/server/nginxprefix/servers -mindepth 1 -not -name .gitignore -delete
"
STOP_CLEANUP_COMMAND="
umount -fl ${SCRIPT_ROOT}/server/nginxprefix/tmp
umount -fl ${SCRIPT_ROOT}/server/mariadb/src
"
COMMAND_ARRAY=(
	"server/bin/nginx -p '${SCRIPT_ROOT}/server/nginxprefix/' -g 'daemon off;'"
	"env UWSGI_MASTER=1 UWSGI_WORKERS=1 server/bin/uwsgi --chdir '${SCRIPT_ROOT}/server/nginxprefix/' -s '${SCRIPT_ROOT}/server/nginxprefix/handlers/uwsgi' --ini '${SCRIPT_ROOT}/server/etc/uwsgi.ini'"
	"env PHP_FCGI_CHILDREN=1 server/bin/php-cgi -b '${SCRIPT_ROOT}/server/nginxprefix/handlers/php-fastcgi' -c '${SCRIPT_ROOT}/server/etc/php.ini'"
	"server/bin/php-fpm -c '${SCRIPT_ROOT}/server/etc/php.ini' -p '${SCRIPT_ROOT}/server/nginxprefix' -y '${SCRIPT_ROOT}/server/etc/php-fpm.conf' -FR"
	"server/bin/fossil server --scgi --localhost --port 9003 --repolist '${SCRIPT_ROOT}/server/nginxprefix/html/fossil/root'"
	"server/bin/git-daemon --port=9418 --base-path='${SCRIPT_ROOT}/server/nginxprefix/html/gitweb/root' --export-all"
	"server/bin/mysqld --defaults-file='${SCRIPT_ROOT}/server/mariadb/etc/my.cnf' --user root -r '${SCRIPT_ROOT}/server/mariadb' -b / --lc-messages-dir /src/sql/share"
)

# options
LAUNCHER_ACTION=""
LAUNCHER_QUIET=false

opts=$(getopt -o a:q -l action:,quiet -- "$@")
eval set -- "${opts}"
for i; do
	case "$i" in
		-a) LAUNCHER_ACTION="$2"; shift; shift;;
		--action) LAUNCHER_ACTION="$2"; shift; shift;;
		-q) LAUNCHER_QUIET=true; shift;;
		--quiet) LAUNCHER_QUIET=true; shift;;
		--) shift; break;
	esac
done

print_help() {
	echo "$0 [-q] -a start|stop"
}

runInBg() {
	eval set -- "$1"
	local SETSID=()
	if command -v perl >/dev/null 2>&1; then
		SETSID=('perl' '-e' 'use POSIX;POSIX::setsid();exec @ARGV' '--')
	elif command -v python >/dev/null 2>&1; then
		SETSID=('python' '-c'
		'import os,sys;os.setsid();os.execvp(sys.argv[1],sys.argv[1:])')
	elif command -v setsid >/dev/null 2>&1; then
		SETSID=('setsid')
	fi
	echo $(
		(
			[[ -t 0 ]] && exec </dev/null
			[[ -t 1 ]] && exec >/dev/null
			[[ -t 2 ]] && exec 2>/dev/null
			trap '' 1 2 
			eval exec {3..255}\>\&-
			umask 0022
			exec "${SETSID[@]}" "$@"
		) >/dev/null 2>&1 &
		echo $!
	)
}

service_start() {
	if test -e "./.Collected_PID";then
		echo "Service still running."
		return
	fi
	eval "${START_INIT_COMMAND}"
	pid_list=""
	for ((i = 0; i < ${#COMMAND_ARRAY[@]}; i++)); do
		pid_list="${pid_list}$(runInBg "${COMMAND_ARRAY[$i]}")"$'\n'
	done
	echo -n "${pid_list}" >./.Collected_PID
}

service_stop() {
	if test -e "./.Collected_PID";then :; else
		echo "Service is not running."
		return
	fi
	pid_list=$(<./.Collected_PID)
	for pid in ${pid_list}; do
		if test -r /proc/"${pid}"/stat; then
			kill -s SIGKILL -- -"$(awk '{print $5}' < /proc/"${pid}"/stat)"
		else
			kill -s SIGKILL -- "${pid}"
		fi
	done
	rm ./.Collected_PID
	eval "${STOP_CLEANUP_COMMAND}"
}

main() {
	cd "$SCRIPT_ROOT"
	
	case "${LAUNCHER_ACTION}" in
		"start")
			if "${LAUNCHER_QUIET}"; then
				service_start >/dev/null 2>&1
			else
				service_start
			fi
			;;
		"stop")
			if "${LAUNCHER_QUIET}"; then
				service_stop >/dev/null 2>&1
			else
				service_stop
			fi
			;;
		*)
			print_help
			;;
	esac
	
	exit 0
}

main
