#!/bin/bash

# constants
declare -r INVOKED_DIR="$PWD"
declare -r SCRIPT_ROOT=$(cd "${0%/*}" && echo "$PWD")

# variables
LAUNCHER_SOURCE=".launcher_source"
LAUNCHER_PID_LIST=".launched_PID"
LAUNCHER_NEEDS_ROOT="false"
START_INIT_COMMAND=""
STOP_CLEANUP_COMMAND=""
EXEC_ARRAY=()

# options
LAUNCHER_ACTION=""
LAUNCHER_QUIET=false

opts=$(getopt -o a:q -l action:,quiet -- "$@")
eval set -- "${opts}"
for i; do
	case "$i" in
		-a) LAUNCHER_ACTION="$2"; shift; shift;;
		--action) LAUNCHER_ACTION="$2"; shift; shift;;
		-q) LAUNCHER_QUIET=true; shift;;
		--quiet) LAUNCHER_QUIET=true; shift;;
		--) shift; break;
	esac
done

print_help() {
	echo "$0 [-q] -a start|stop"
}

check_source() {
	if test -z "${EXEC_ARRAY[*]}" &&
	   test -e "${LAUNCHER_SOURCE}"; then
		source "${LAUNCHER_SOURCE}"
	fi
}

fork_exec() {
	eval set -- "$1"
	local SETSID=()
	if command -v perl >/dev/null 2>&1; then
		SETSID=('perl' '-e' 'use POSIX;POSIX::setsid();exec @ARGV' '--')
	elif command -v python >/dev/null 2>&1; then
		SETSID=('python' '-c'
		'import os,sys;os.setsid();os.execvp(sys.argv[1],sys.argv[1:])')
	elif command -v setsid >/dev/null 2>&1; then
		SETSID=('setsid')
	fi
	echo $(
		(
			[[ -t 0 ]] && exec </dev/null
			[[ -t 1 ]] && exec >/dev/null
			[[ -t 2 ]] && exec 2>/dev/null
			trap '' 1 2
			eval exec {3..255}\>\&-
			umask 0022
			exec "${SETSID[@]}" "$@"
		) >/dev/null 2>&1 &
		echo $!
	)
}

launcher_start() {
	if test -e "${LAUNCHER_PID_LIST}";then
		echo "Still running."
		return
	fi
	eval "${START_INIT_COMMAND}"
	pid_list=""
	for ((i = 0; i < ${#EXEC_ARRAY[@]}; i++)); do
		pid_list="${pid_list}$(fork_exec "${EXEC_ARRAY[$i]}")"$'\n'
	done
	echo -n "${pid_list}" > "${LAUNCHER_PID_LIST}"
}

launcher_stop() {
	if test -e "${LAUNCHER_PID_LIST}";then :; else
		echo "Nothing is running."
		return
	fi
	pid_list=$(< "${LAUNCHER_PID_LIST}" )
	for pid in ${pid_list}; do
		if test -r /proc/"${pid}"/stat; then
			kill -s SIGKILL -- -"$(awk '{print $5}' < /proc/"${pid}"/stat)"
		else
			kill -s SIGKILL -- "${pid}"
		fi
	done
	rm "${LAUNCHER_PID_LIST}"
	eval "${STOP_CLEANUP_COMMAND}"
}

main() {
	cd "$SCRIPT_ROOT"

	check_source

	if test "${LAUNCHER_NEEDS_ROOT}" = "true" && test ${UID} -ne 0; then
		echo "!!! this script must be run as root"
		exit 1
	fi

	case "${LAUNCHER_ACTION}" in
		"start")
			if "${LAUNCHER_QUIET}"; then
				launcher_start >/dev/null 2>&1
			else
				launcher_start
			fi
			;;
		"stop")
			if "${LAUNCHER_QUIET}"; then
				launcher_stop >/dev/null 2>&1
			else
				launcher_stop
			fi
			;;
		*)
			print_help
			;;
	esac

	exit 0
}

main
