#!/bin/bash

SCRIPT_ROOT=$(cd "${0%/*}" && echo "$PWD")
cd "$SCRIPT_ROOT"

#variables
COMMAND_ARRAY=(
	"./server/bin/server/nginx -p ${PWD}/nginxprefix/ -g 'daemon off;'"
	"./server/bin/server/uwsgi --chdir ${PWD}/nginxprefix/ --ini ${PWD}/server/uwsgi.ini"
	"PHP_FCGI_CHILDREN=1 ./server/bin/server/php-cgi -b $PWD/nginxprefix/php-fastcgi.socket -c $PWD/server/php.ini"
	"./server/bin/git/git-daemon --port=9418 --base-path=\"${PWD}/nginxprefix/html/gitweb/root\" --export-all"
)

signal=""
quiet=false

opts=$(getopt -o s:q -l signal:,quiet -- "$@")
eval set -- "${opts}"
for i; do
	case "$i" in
		-s) signal="$2"; shift; shift;;
		--signal) signal="$2"; shift; shift;;
		-q) quiet=true; shift; shift;;
		--quiet) quiet=true; shift; shift;;
		--) shift; break;
	esac
done

runInBg() {
	echo -n $(bash -c "set -m; $* >/dev/null 2>&1 & echo \$!" 2>/dev/null)
	disown -a >/dev/null 2>&1
}

service_start() {
	if test -e "./collected_PID";then
		echo "Service still running."
		return
	fi
	process_pids=""
	for ((i = 0; i < ${#COMMAND_ARRAY[@]}; i++)); do
		process_pids="${process_pids}$(runInBg "${COMMAND_ARRAY[$i]}")"$'\n'
	done
	echo -n "${process_pids}" >./collected_PID
}

service_stop() {
	if test -e "./collected_PID";then :; else
		echo "Service is not running."
		return
	fi
	process_pids=$(<./collected_PID)
	for pid in ${process_pids}; do
		if test -r /proc/"${pid}"/stat; then
			kill -s SIGKILL -- -"$(awk '{print $5}' < /proc/"${pid}"/stat)" >/dev/null 2>&1
		else
			kill -s SIGKILL -- "${pid}" >/dev/null 2>&1
		fi
	done
	rm ./collected_PID
}

if test "$signal" = "start"; then
	if $quiet; then service_start >/dev/null 2>&1; else service_start; fi
elif test "$signal" = "stop"; then
	if $quiet; then service_stop >/dev/null 2>&1; else service_stop; fi
fi

exit 0

