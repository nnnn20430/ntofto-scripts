#!/bin/bash

# constants
declare -r INVOKED_DIR="$PWD"
declare -r SCRIPT_ROOT="$(cd "${0%/*}" 2>/dev/null; echo "$PWD")"

# variables
serviceIndexFile="./services"
declare -A serviceList
serviceList=(
	[" "]="./"
)

# options
# fL format: type,name
# type is a single char
# b=boolean (value is set to true)
# a=argument (value is set to the next parameter if found)
# A=required argument (value is set to the next parameter or error)
declare -A fL
fL=(
	["-a"]="b,all"
	["--all"]="b,all"
	["-b"]="b,build"
	["--build"]="b,build"
	["-r"]="b,rebuild"
	["--rebuild"]="b,rebuild"
)

declare -A fV
fV=(
	["all"]=false
	["build"]=false
	["rebuild"]=false
)
eArgs=()

for ((i = 1; i <= ${#}; i++)); do
	if test "${!i:0:1}" = "-"; then
		if test "${fL[${!i}]:+_}"; then
			case "${fL[${!i}]:0:1}" in
				"b")
					fV["${fL[${!i}]:2}"]=true
					;; 
				"a")
					if eval test "\"\${$(($i+1))+_}\""; then
						if test "${fL[$(eval echo \"\$$(($i+1))\")]+_}"; then :; else
							fV["${fL[${!i}]:2}"]="$(eval echo \"\${$(($i+1))}\")"
							((i++))
						fi
					fi
					;;
				"A")
					if eval test "\"\${$(($i+1))+_}\""; then
						if test "${fL[$(eval echo \"\$$(($i+1))\")]+_}"; then
							echo "Argument for \"${fL[${!i}]:2}\" flag missing"
							exit 1
						else
							fV["${fL[${!i}]:2}"]="$(eval echo \"\${$(($i+1))}\")"
							((i++))
						fi
					else
						echo "Argument for \"${fL[${!i}]:2}\" flag missing"
						exit 1
					fi
					;;
			esac
		else
			eArgs+=("${!i}")
		fi
	else
		eArgs+=("${!i}")
	fi
done

#todo
#implement service controll using $0 [--all|-a] start/stop [name]
#implement adding service to index $0 add/remove name [path]
#implement service status using $0 [--all|-a] status [name]
#implement building using $0 [--all|-a] build [name]
#implement cleaning using $0 [--all|-a] clean [name]
#implement clean then build using $0 [--all|-a] rebuild [name]
#implement update source using $0 [--all|-a] [(--build|-b)|(--rebuild|-r)] update [name]

print_help() {
	echo "$0 [OPTIONS...] ACTION [PARAMETER...]"
	echo
	echo "Valid options:"
	echo "	-a, --all"
	echo "		selects all services, where it aplies"
	echo
	echo "	-b, --build"
	echo "		causes update action to also build"
	echo
	echo "	-r, --rebuild"
	echo "		causes update action to also rebuild"
	echo
	echo "Valid actions:"
	echo "	start NAME"
	echo "		starts the specified service"
	echo "		service name ignored when --all flag is set"
	echo
	echo "	stop NAME"
	echo "		stops the specified service"
	echo "		service name ignored when --all flag is set"
	echo
	echo "	add NAME PATH"
	echo "		adds new service to index"
	echo
	echo "	remove NAME"
	echo "		removes service from index"
	echo
	echo "	build NAME"
	echo "		builds new binaries for the service from source"
	echo "		service name ignored when --all flag is set"
	echo
	echo "	clean NAME"
	echo "		deletes build for the service"
	echo "		service name ignored when --all flag is set"
	echo
	echo "	rebuild NAME"
	echo "		combines actions of clean followed by build"
	echo "		service name ignored when --all flag is set"
	echo
	echo "	update NAME"
	echo "		fetches new version of source for service"
	echo "		service name ignored when --all flag is set"
	echo "		--build causes a build action after update"
	echo "		--rebuild causes a rebuild action after update"
}

read_settings() {
	local file=$(<"${1}")
	local IFS=$'\n'
	local line name value

	for line in ${file}; do
		name="${line%%=*}"
		value="${line#*=}"
		eval "${2}['${name//\'/\'\\\'\'}']='${value//\'/\'\\\'\'}'"
	done
}

write_settings() {
	local file=""
	local _arrDef=$(declare -p "${2}")
	eval "declare -A _arr=${_arrDef#*=}"

	for name in "${!_arr[@]}"; do
		file="${file}${name}=${_arr[$name]}"$'\n'
	done
	echo -n "${file}" > "${1}"
}

service_action() {(
	local -r ACTION="${1}" SERVICE="${2}"
	cd "${serviceList[${SERVICE}]}"
	source ".ntofto_service"
	if declare -f "${ACTION}" >/dev/null; then
		"${ACTION}"
	fi
)}

service_start() {
	if "${fV[all]}"; then
		for name in "${!serviceList[@]}"; do
			service_action start "${serviceList[$name]}"
		done
	else
		if test "${eArgs[1]}"; then
			service_action start "${eArgs[1]}"
		else
			echo "No service specified."
			exit 1
		fi
	fi
}

service_stop() {
	if "${fV[all]}"; then
		for name in "${!serviceList[@]}"; do
			service_action stop "${serviceList[$name]}"
		done
	else
		if test "${eArgs[1]}"; then
			service_action stop "${eArgs[1]}"
		else
			echo "No service specified."
			exit 1
		fi
	fi
}

service_index_add() {
	if test "${#eArgs[@]}" -lt 3; then
		print_help
		exit 0
	fi
	local -A serviceList
	read_settings "${serviceIndexFile}" serviceList
	serviceList["${eArgs[1]}"]="${eArgs[2]}"
	write_settings "${serviceIndexFile}" serviceList
}

service_index_remove() {
	if test "${#eArgs[@]}" -lt 2; then
		print_help
		exit 0
	fi
	local -A serviceList
	read_settings "${serviceIndexFile}" serviceList
	unset serviceList["${eArgs[1]}"]
	write_settings "${serviceIndexFile}" serviceList
}

main() {
	cd "$SCRIPT_ROOT"

	if test -e "${serviceIndexFile}"; then
		read_settings "${serviceIndexFile}" serviceList
	fi

	case "${eArgs[0]}" in
		"start")
			service_start
			;;
		"stop")
			service_stop
			;;
		"add")
			service_index_add
			;;
		"remove")
			service_index_remove
			;;
		*)
			print_help
			;;
	esac

	exit 0
}

main
